from flask import Blueprint, request, jsonify
from src.models.user import db
from src.models.campaign import Campaign, Customer, CampaignDispatch, MessageLog
import pandas as pd
import io
import json
from datetime import datetime, timedelta
import os

campaign_bp = Blueprint('campaign', __name__)

@campaign_bp.route('/campaigns', methods=['GET'])
def get_campaigns():
    """Listar todas as campanhas"""
    campaigns = Campaign.query.all()
    return jsonify([{
        'id': c.id,
        'name': c.name,
        'status': c.status,
        'target_segment': c.target_segment,
        'created_at': c.created_at.isoformat(),
        'dispatches_count': len(c.dispatches)
    } for c in campaigns])

@campaign_bp.route('/campaigns', methods=['POST'])
def create_campaign():
    """Criar nova campanha"""
    data = request.get_json()
    
    campaign = Campaign(
        name=data['name'],
        message_template=data['message_template'],
        image_path=data.get('image_path'),
        coupon_code=data.get('coupon_code'),
        target_segment=data.get('target_segment', 'all')
    )
    
    db.session.add(campaign)
    db.session.commit()
    
    return jsonify({
        'id': campaign.id,
        'message': 'Campanha criada com sucesso'
    }), 201

@campaign_bp.route('/customers/import', methods=['POST'])
def import_customers():
    """Importar clientes via CSV"""
    if 'file' not in request.files:
        return jsonify({'error': 'Nenhum arquivo enviado'}), 400
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'Nenhum arquivo selecionado'}), 400
    
    if not file.filename.endswith('.csv'):
        return jsonify({'error': 'Arquivo deve ser CSV'}), 400
    
    try:
        # Ler CSV
        stream = io.StringIO(file.stream.read().decode("UTF8"), newline=None)
        df = pd.read_csv(stream)
        
        # Validar colunas obrigat√≥rias
        required_columns = ['name', 'phone']
        if not all(col in df.columns for col in required_columns):
            return jsonify({
                'error': f'Colunas obrigat√≥rias: {required_columns}. Encontradas: {list(df.columns)}'
            }), 400
        
        imported_count = 0
        updated_count = 0
        
        for _, row in df.iterrows():
            # Verificar se cliente j√° existe
            existing_customer = Customer.query.filter_by(phone=row['phone']).first()
            
            if existing_customer:
                # Atualizar dados existentes
                existing_customer.name = row['name']
                existing_customer.email = row.get('email', existing_customer.email)
                existing_customer.location = row.get('location', existing_customer.location)
                existing_customer.average_ticket = float(row.get('average_ticket', existing_customer.average_ticket or 0))
                existing_customer.order_frequency = int(row.get('order_frequency', existing_customer.order_frequency or 0))
                existing_customer.preferred_items = row.get('preferred_items', existing_customer.preferred_items)
                existing_customer.updated_at = datetime.utcnow()
                updated_count += 1
            else:
                # Criar novo cliente
                customer = Customer(
                    name=row['name'],
                    phone=row['phone'],
                    email=row.get('email'),
                    location=row.get('location'),
                    average_ticket=float(row.get('average_ticket', 0)),
                    order_frequency=int(row.get('order_frequency', 0)),
                    preferred_items=row.get('preferred_items')
                )
                db.session.add(customer)
                imported_count += 1
        
        # Segmentar clientes ap√≥s importa√ß√£o
        _segment_customers()
        
        db.session.commit()
        
        return jsonify({
            'message': 'Importa√ß√£o conclu√≠da',
            'imported': imported_count,
            'updated': updated_count,
            'total': imported_count + updated_count
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro ao processar arquivo: {str(e)}'}), 500

@campaign_bp.route('/customers/segments', methods=['GET'])
def get_customer_segments():
    """Obter estat√≠sticas de segmenta√ß√£o de clientes"""
    segments = db.session.query(
        Customer.segment,
        db.func.count(Customer.id).label('count')
    ).group_by(Customer.segment).all()
    
    total_customers = Customer.query.count()
    
    return jsonify({
        'total_customers': total_customers,
        'segments': [{'segment': s.segment, 'count': s.count} for s in segments]
    })

@campaign_bp.route('/campaigns/<int:campaign_id>/schedule', methods=['POST'])
def schedule_campaign(campaign_id):
    """Agendar disparos de uma campanha"""
    campaign = Campaign.query.get_or_404(campaign_id)
    data = request.get_json()
    
    start_date = datetime.fromisoformat(data['start_date'])
    target_segment = data.get('target_segment', campaign.target_segment)
    
    # Buscar clientes do segmento
    query = Customer.query
    if target_segment and target_segment != 'all':
        query = query.filter(Customer.segment == target_segment)
    
    customers = query.all()
    
    if not customers:
        return jsonify({'error': 'Nenhum cliente encontrado para o segmento'}), 400
    
    # Dividir em grupos de 300
    groups = [customers[i:i+300] for i in range(0, len(customers), 300)]
    
    # Criar disparos programados
    for group_index, group in enumerate(groups):
        for dispatch_number in range(1, 4):  # 3 disparos
            dispatch_date = start_date + timedelta(days=(dispatch_number - 1) * 2)
            
            dispatch = CampaignDispatch(
                campaign_id=campaign_id,
                customer_group=group_index + 1,
                dispatch_number=dispatch_number,
                scheduled_date=dispatch_date,
                customers_count=len(group)
            )
            db.session.add(dispatch)
    
    campaign.status = 'active'
    db.session.commit()
    
    return jsonify({
        'message': 'Campanha agendada com sucesso',
        'groups_created': len(groups),
        'total_dispatches': len(groups) * 3,
        'total_customers': len(customers)
    })

def _segment_customers():
    """Segmentar clientes automaticamente"""
    customers = Customer.query.all()
    
    for customer in customers:
        # L√≥gica de segmenta√ß√£o
        if customer.average_ticket >= 100:
            customer.segment = 'high_ticket'
        elif customer.order_frequency >= 8:  # 8+ pedidos por m√™s
            customer.segment = 'frequent'
        elif customer.location:
            customer.segment = 'location_based'
        else:
            customer.segment = 'standard'

@campaign_bp.route('/knowledge/books', methods=['GET'])
def get_marketing_books():
    """Retornar conhecimento sobre livros de marketing"""
    books_knowledge = {
        "essential_books": [
            {
                "title": "Isso √© Marketing",
                "author": "Seth Godin",
                "key_concepts": [
                    "Criar algo not√°vel (vaca roxa)",
                    "Marketing √© sobre mudan√ßa",
                    "Encontrar e servir seu p√∫blico m√≠nimo vi√°vel"
                ],
                "application_to_sushi": "Criar experi√™ncias √∫nicas no delivery que se destaquem da concorr√™ncia"
            },
            {
                "title": "Marketing 4.0",
                "author": "Philip Kotler",
                "key_concepts": [
                    "Conectividade e engajamento digital",
                    "Jornada do cliente omnichannel",
                    "Marketing centrado no humano"
                ],
                "application_to_sushi": "Integrar todos os pontos de contato digital para uma experi√™ncia consistente"
            },
            {
                "title": "Marketing para Restaurantes",
                "author": "Diversos",
                "key_concepts": [
                    "Estrat√©gias espec√≠ficas para food service",
                    "Otimiza√ß√£o de delivery",
                    "Fideliza√ß√£o de clientes"
                ],
                "application_to_sushi": "Aplica√ß√£o direta de t√°ticas testadas no setor de alimenta√ß√£o"
            }
        ],
        "key_strategies": [
            "Segmenta√ß√£o baseada em comportamento de compra",
            "Personaliza√ß√£o de ofertas",
            "Automa√ß√£o de campanhas",
            "Monitoramento de ROI",
            "Experi√™ncia omnichannel"
        ]
    }
    
    return jsonify(books_knowledge)

@campaign_bp.route('/ai/generate-content', methods=['POST'])
def generate_marketing_content():
    """Gerar conte√∫do de marketing usando IA"""
    data = request.get_json()
    content_type = data.get('type', 'whatsapp')
    target_segment = data.get('segment', 'all')
    product_focus = data.get('product', 'sushi')
    
    # Templates baseados no conhecimento dos livros
    templates = {
        'whatsapp': {
            'high_ticket': {
                'message': "Ol√° {nome_cliente}! üç£ Que tal experimentar nossa sele√ß√£o premium? Temos uma oferta especial para clientes VIP como voc√™. Use o cupom {cupom_desconto} e ganhe 15% OFF no seu pr√≥ximo pedido premium. Acesse: {link_cardapio}",
                'image_suggestion': "Imagem de combinado premium com sashimis e pe√ßas especiais"
            },
            'frequent': {
                'message': "Oi {nome_cliente}! üòä Notamos que voc√™ ama nossos {sabor_preferido}! Preparamos uma surpresa especial: {cupom_desconto} com 10% OFF para seu pr√≥ximo pedido. Pe√ßa j√°: {link_cardapio}",
                'image_suggestion': "Imagem do item preferido do cliente em destaque"
            },
            'standard': {
                'message': "Ol√° {nome_cliente}! üç± Est√° com vontade de sushi fresquinho? Temos uma promo√ß√£o imperd√≠vel para voc√™! Use {cupom_desconto} e ganhe desconto especial. Confira: {link_cardapio}",
                'image_suggestion': "Imagem de combinado popular com boa rela√ß√£o custo-benef√≠cio"
            }
        },
        'instagram': {
            'post': "üç£ Frescor que voc√™ pode sentir! Nossos sushis s√£o preparados na hora com ingredientes premium. #SushiFresco #DeliveryDeQualidade #SushiLovers",
            'story': "Swipe para ver nossos combinados mais pedidos! üëÜ Stories com enquete sobre sabor favorito"
        },
        'facebook': {
            'post': "ü•¢ A tradi√ß√£o japonesa na sua casa! Delivery de sushi com a qualidade que voc√™ merece. Pe√ßa j√° e comprove a diferen√ßa!"
        }
    }
    
    if content_type == 'whatsapp':
        segment_template = templates['whatsapp'].get(target_segment, templates['whatsapp']['standard'])
        return jsonify({
            'content_type': 'whatsapp',
            'message_template': segment_template['message'],
            'image_suggestion': segment_template['image_suggestion'],
            'variables': ['nome_cliente', 'cupom_desconto', 'link_cardapio', 'sabor_preferido']
        })
    else:
        return jsonify(templates.get(content_type, {'message': 'Tipo de conte√∫do n√£o encontrado'}))

